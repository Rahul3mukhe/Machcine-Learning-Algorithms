# -*- coding: utf-8 -*-
"""Car-Price-Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DehafAtDqkWFrdF5D3l2ibjHgWjnH1Ci
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('quikr_car.csv')

dataset = pd.DataFrame(df)

df

# Data Analysis

# missing values
df.isnull()

df.isnull().sum()

null_colomn = "kms_driven"
df.dropna(subset = [null_colomn],axis = 0,inplace = True)

null_colomn1 = "fuel_type"
df.dropna(subset = [null_colomn1],axis = 0,inplace = True)

df.isnull().sum()

#year vs price graph
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='year', y='Price')
plt.title('Price vs. Year')
plt.xlabel('Year')
plt.ylabel('Price')
plt.show()

#kms driven vs price
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='kms_driven', y='Price')
plt.title('Price vs. Kms Driven')
plt.xlabel('Kms Driven')
plt.ylabel('Price')
plt.show()

# plt.figure(figsize=(10, 6))
# sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
# plt.title('Correlation Matrix')
# plt.show()

#Disribution of car prices
plt.figure(figsize=(10, 6))
sns.histplot(df['Price'], kde=True)
plt.title('Distribution of Car Prices')
plt.xlabel('Price')
plt.show()

#price vs fuel type
plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x='fuel_type', y='Price')
plt.title('Price vs. Fuel Type')
plt.xlabel('Fuel Type')
plt.ylabel('Price')
plt.show()

"""# #preprocessing"""

df['name'] = df['name'].apply(lambda x :x.lower()) #converts to lower case
df['company'] = df['company'].apply(lambda x :x.lower()) #converts to lower case
df

#Removing stop words
import nltk
from nltk.corpus import stopwords
nltk.download('stopwords')

stop_words = stopwords.words('english')

def remove_stopwords(text):
  words = text.lower().split()  # Tokenize and lowercase
  filtered_words = [word for word in words if word not in stop_words]
  return ' '.join(filtered_words)

df['name'] = df['name'].apply(remove_stopwords)
df['company'] = df['company'].apply(remove_stopwords)

# whitespaces will be removed
df['name'] = df['name'].apply(lambda text: text.strip())
df

df.loc[:,'name'] = df.loc[:,'name'].str.replace(r"[^\w\s]", '', regex=True)  #IT REMOVES SPECIAL CHARACTERS
df.loc[:,'name'] = df.loc[:,'name'].str.strip()
df['name']

# Remove Special characters
df.loc[:,'name'] = df.loc[:,'name'].str.replace(r"[^\w\s]", '', regex=True)
df.loc[:,'name'] = df.loc[:,'name'].str.strip()
df['name']

# Feature Engineering
from sklearn.feature_extraction.text import TfidfVectorizer
vectorizer = TfidfVectorizer()
tfidf_features = vectorizer.fit_transform(df['name'])
tfidf_features = vectorizer.fit_transform(df['company'])
tfidf_features

#Converting year to numeric values as it has non-year values
df=df[df['year'].str.isnumeric()]

#Change year object to integer
df.loc[:,'year']=df.loc[:,'year'].astype(int)

#Removing the 'Ask for Price' from Price column
df=df[df['Price']!='Ask For Price']

#Change Price from object to int and remove commas
df['Price']=df['Price'].str.replace(',','').astype(int)

#Removing 'kms' from kms_driven columns
df['kms_driven']=df['kms_driven'].str.split().str.get(0).str.replace(',','')

#Converting 'kms-driven' column to int
df['kms_driven']=df['kms_driven'].astype(int)

#Removing nan values from 'fuel_type'
df=df[~df['fuel_type'].isna()]

df.shape

#Changing car names by keeping only the first three words
df['name']=df['name'].str.split().str.slice(start=0,stop=3).str.join(' ')

#Resetting the index of the final cleaned data
df=df.reset_index(drop=True)

df

#Checking unique values of Company
df['company'].unique()

#creating a linear Regression
import sklearn as sk

# x-independent variable
# y-dependent variable

# Splitting dependent and independent features

X=df[['name','company','year','kms_driven','fuel_type']]
y=df['Price']

y.shape

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)

from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import make_column_transformer
from sklearn.pipeline import make_pipeline
from sklearn.metrics import r2_score

#Creating an OneHotEncoder object to contain all the possible categories
ohe=OneHotEncoder()
ohe.fit(X[['name','company','fuel_type']])

#Creating a column transformer to transform categorical columns
column_trans=make_column_transformer((OneHotEncoder(categories=ohe.categories_),['name','company','fuel_type']),
                                    remainder='passthrough')

from sklearn.linear_model import LinearRegression

lr=LinearRegression()

pipe=make_pipeline(column_trans,lr)

pipe.fit(X_train,y_train)

y_pred=pipe.predict(X_test)

y_pred

r2_score(y_test,y_pred)

scores=[]
for i in range(1000):
    X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.1,random_state=i)
    lr=LinearRegression()
    pipe=make_pipeline(column_trans,lr)
    pipe.fit(X_train,y_train)
    y_pred=pipe.predict(X_test)
    scores.append(r2_score(y_test,y_pred))

np.argmax(scores)

scores[np.argmax(scores)]