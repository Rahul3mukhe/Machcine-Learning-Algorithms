# -*- coding: utf-8 -*-
"""K means clustering .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f4EW4eQDnxWBcvo73Vl0_GLx7nijG9pm
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.datasets import make_blobs
# %matplotlib inline

x,y=make_blobs(n_samples=100,n_features=2,centers=2,random_state=1)

x.shape

plt.scatter(x[:,0],x[:,1],c=y,s=50)
plt.show()

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=1)

from sklearn.cluster import KMeans

wcss=[]
for k in range(1,11):
    kmeans=KMeans(n_clusters=k,init = 'k-means++')
    kmeans.fit(x_train)
    wcss.append(kmeans.inertia_)

wcss

plt.plot(range(1,11),wcss)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')

kmeans=KMeans(n_clusters=3,init='k-means++')
y_kmeans=kmeans.fit_predict(x_train)
y_labels=kmeans.fit_predict(x_train)

plt.scatter(x_train[:,0],x_train[:,1],c=y_labels)

##knee locator
!pip install kneed

from kneed import KneeLocator

kl = KneeLocator(range(1,11),wcss,curve='convex',direction='decreasing')

kl.elbow

#performance metrics
#silhotte score
from sklearn.metrics import silhouette_score

silhoutte_coefficeints=[]
for k in range(2,11):
    kmeans=KMeans(n_clusters=k,init='k-means++')
    kmeans.fit(x_train)
    score=silhouette_score(x_train,kmeans.labels_)
    silhoutte_coefficeints.append(score)

silhoutte_coefficeints

plt.plot(range(2,11),silhoutte_coefficeints)
plt.xticks(range(2,11))
plt.xlabel('Number of clusters')
plt.ylabel('Silhoutte Coefficient')

